* 리덕스(Redux)
  - 리액트에서 가장 많이 사용되는 상태관리 라이브러리
  - 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜서 효율적으로 관리 가능
    => 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고 손쉽게 상태 값 전달, 업데이트 가능
  - 전역 상태를 관리할 때 매우 효율적

[개념 정리]
* 액션
  - 상태에 변화가 필요하면 액션이 발생
    * 액션 객체는 type 필드를 반드시 가지고 있어야 한다.
    {
      type: 'TOGGLE_VALUE'
    }

* 액션 생성 함수
  - 액션 생성 함수(action creator)은 액션 객체를 만들어 주는 함수
  - 매번 액션 객체를 직접 작성할 경우 문제가 발생 하는 것, 번거로움 해결
    const changeInput = text =>({
      type: 'CHANG_INPUT',
      text
    })

* 리듀서
  - 변화를 일으키는 함수
    * 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달 받은 액션 객체를 파라미터로 받아온다.
    * 그 후 두 값을 참고해서 새로운 상태를 만든다.

    const initialState = {
      counter: 1
    };

    function reducer(state = initialState, action) {
      switch (action.type) {
        case INCREMENT:
          return{
            counter: state.counter + 1
          };
          default:
            return state;
      }
    }

* 스토어
  - 프로젝트에 리덕스를 적용하기 위해 스토어를 만든다.
    * 한 개의 프로젝트는 단 하나의 스토어만 가질 수 있다.
  - 스토어 안에는 현재 애플리케이션 상태, 리듀서, 몇 가지 중요한 내장함수가 들어있다.
  
*  디스패치
  - 스토어의 내장 함수 중 하나
  - '액션을 발생시키는 것'이라고 생각하면 된다.
  - dispatch(action)와 같은 형태로 액션 객체를 파라미터로 넣어서 호출한다.
    * 이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 준다.

* 구독
  - 스토어의 내장 함수 중 하나
  - 구독 함수 안에 리스너 함수를 파라미터로 넣어 호출해주면, 이 리스너 함수가 액션이 디스패치 되어 상태가
    업데이트 될 때마다 호출 된다.
    const listener = () => {
      console.log('상태가 업데이트됨');
    }
    const unsubscribe = store.subscribe(listener);

    unsubscribe(); //추후 구독을 비활성화할 때 함수를 호출

* 리덕스는 리액트에 종속되어 있지 않다.
  - 리덕스는 리액트에서 사용하려고 만들었지만, 실제로 다른 UI 라이브러리/프레임워크와 함께 사용할 수 있다.
  - vue에서는 리덕스와 유사한 vuex를 주로 사용한다.
    * 리덕스는 바닐라 자바스크립트와 함께 사용도 가능하다.
      (바닐라 자바스크립트란 라이브러리나 프레임워크 없이 사용하는 순수 자바스크립트 그 자체)


* react-redux 라이브러리
  - 규모가 큰 프로젝트에서 애플리케이션 상태 관리하기
  - 리덕스 라이브러리 사용 시 이점
    * 상태 업데이트에 관한 로직을 따로 분리해 모듈화
    * 여러 컴포넌트에서 동일한 상태 공유
    * 업데이트가 필요한 컴포넌트만 리렌더링되도록 최적화
  - react-redux 라이브러리에서 제공하는 유틸 함수(connect)와 컴포넌트(Provider) 사용
  - 리덕스 관련 코드
    * 액션 타입, 액션 생성 함수, 리듀서 코드 
    * 일반구조(리더스 공식문서): actions, constants, reducers 세 개의 디렉터리 안에 기능별로 파일을 저장
     => Ducks 패턴: 액션 타입, 액션 생성 함수, 리듀서 함수를 기능별로 파일 하나에 몰아서 작성(modules 폴더)

* 액션 타입 정의
  - 액션 타입은 대문자로 정의한다.
  - 문자열 내용은 '모듈 이름/액션 이름' 형태 - 모듈 이름을 넣음으로써 액션 이름 충돌 방지
    * ex) const INCREASE = 'counter/INCREASE';
          const DECREASE = 'counter/DECREASE';

* 액션 생성 함수 정의
  - export 키워드로 선언 → 추후 다른 파일에서 불러와 사용 가능하게끔 한다.
    * ex) export const increase = () => ({ type: INCREASE });
          export const decrease = () => ({ type: DECREASE });

* 초기 상태 및 리듀서 함수 정의
  - export : 모듈 여러 개를 내보낼 수 있다.
  - export default : 모듈 단 한 개를 내보낼 수 있다. 

  - 불러오는 방식의 차이
    * export : 원본 파일에 작성된 모듈 이름 그대로 {중괄호} 안에 적어야 한다.
    * export default : 임의의 이름으로 모듈을 임포트할 수 있다. 중괄호 없이 적는다.
      * ex) import counter from './counter';
            import { increase, decrease } from './counter';
            
            // 한꺼번에 불러오고 싶을 때
            import counter, { increase, decrease } from './counter';